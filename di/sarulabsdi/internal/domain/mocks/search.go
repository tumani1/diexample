// Code generated by MockGen. DO NOT EDIT.
// Source: search_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/tumani1/diexample/di/sarulabsdi/internal/domain"
)

// MockISearchRepository is a mock of ISearchRepository interface
type MockISearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISearchRepositoryMockRecorder
}

// MockISearchRepositoryMockRecorder is the mock recorder for MockISearchRepository
type MockISearchRepositoryMockRecorder struct {
	mock *MockISearchRepository
}

// NewMockISearchRepository creates a new mock instance
func NewMockISearchRepository(ctrl *gomock.Controller) *MockISearchRepository {
	mock := &MockISearchRepository{ctrl: ctrl}
	mock.recorder = &MockISearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISearchRepository) EXPECT() *MockISearchRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockISearchRepository) Find(ctx context.Context, filter *domain.SearchFilter) ([]*domain.SearchEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filter)
	ret0, _ := ret[0].([]*domain.SearchEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockISearchRepositoryMockRecorder) Find(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockISearchRepository)(nil).Find), ctx, filter)
}
